// Mocks generated by Mockito 5.4.6 from annotations
// in cody/test/screenshot_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:cody/blocs/totp/totp_bloc.dart' as _i3;
import 'package:cody/models/account.dart' as _i7;
import 'package:cody/models/account_data_result.dart' as _i6;
import 'package:cody/services/accounts_data_service.dart' as _i5;
import 'package:cody/services/navigator_service.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTotpBloc_1 extends _i1.SmartFake implements _i3.TotpBloc {
  _FakeTotpBloc_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_2<T extends _i4.State<_i4.StatefulWidget>>
    extends _i1.SmartFake implements _i4.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountsDataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountsDataService extends _i1.Mock
    implements _i5.AccountsDataService {
  MockAccountsDataService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoadingData => (super.noSuchMethod(
        Invocation.getter(#isLoadingData),
        returnValue: false,
      ) as bool);

  @override
  _i2.StreamController<void> get updateStream => (super.noSuchMethod(
        Invocation.getter(#updateStream),
        returnValue: _FakeStreamController_0<void>(
          this,
          Invocation.getter(#updateStream),
        ),
      ) as _i2.StreamController<void>);

  @override
  List<_i3.TotpBloc> get accounts => (super.noSuchMethod(
        Invocation.getter(#accounts),
        returnValue: <_i3.TotpBloc>[],
      ) as List<_i3.TotpBloc>);

  @override
  set isLoadingData(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoadingData,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set accounts(List<_i3.TotpBloc>? value) => super.noSuchMethod(
        Invocation.setter(
          #accounts,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<void> fetchNewData(
    dynamic Function(_i6.AccountDataResult)? onAccountsFetched, {
    bool? noLocalData = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNewData,
          [onAccountsFetched],
          {#noLocalData: noLocalData},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> cleanupLocalCodes() => (super.noSuchMethod(
        Invocation.method(
          #cleanupLocalCodes,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i3.TotpBloc convertAccountToBloc(_i7.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertAccountToBloc,
          [account],
        ),
        returnValue: _FakeTotpBloc_1(
          this,
          Invocation.method(
            #convertAccountToBloc,
            [account],
          ),
        ),
      ) as _i3.TotpBloc);
}

/// A class which mocks [NavigatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorService extends _i1.Mock implements _i8.NavigatorService {
  MockNavigatorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GlobalKey<_i4.NavigatorState> get navigatorKey => (super.noSuchMethod(
        Invocation.getter(#navigatorKey),
        returnValue: _FakeGlobalKey_2<_i4.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
      ) as _i4.GlobalKey<_i4.NavigatorState>);

  @override
  String get currentActiveRoute => (super.noSuchMethod(
        Invocation.getter(#currentActiveRoute),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#currentActiveRoute),
        ),
      ) as String);

  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  set currentActiveRoute(String? value) => super.noSuchMethod(
        Invocation.setter(
          #currentActiveRoute,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set previousRoute(String? value) => super.noSuchMethod(
        Invocation.setter(
          #previousRoute,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateTo(
    String? routeName, [
    Object? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [
            routeName,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
